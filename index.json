[
{
	"uri": "/signatures/variables/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": " This part will be executed first to generate for your signature list of input.\nDefault variables generated from input    Default variable E.g: http://example.com/a/b/c.php?q=123     {{.URL}} http://example.com/a/b/c?q=123   {{.BaseURL}} http://example.com   {{.Host}} example.com   {{.Path}} /a/b/c   {{.Extension}} .php   {{.oob}} take from --ssrf xxx.burpcollab.net or select from DB    List of avaliable Variables function    API Variables Description Example     File return string as content of file and split it by new line File(\u0026quot;/tmp/sensitvie_paths.txt\u0026quot;)   InputCmd return string as output of os command InputCmd(\u0026quot;echo 123\u0026quot;)   RandomString return random string with length RandomString(6) will return string like this: zkdlsa   RandomNumber return random number with length RandomNumber(4) will return string like this: 6523   Range return random string with length Range(1,6) will return list of strings like this 1 to 5`   URLEncode return url encoded string URLEncode(\u0026quot;samp le\u0026quot;) will return string like this: sample%20le   URLEncodeByLines Like URLEncode but split input as a new line first URLEncodeByLines(\u0026quot;samp le\\ndummy\u0026quot;)   Base64Encode return base64 encoded string Base64Encode(\u0026quot;a\u0026quot;) will return string like this: YQo=   Base64EncodeByLines Like Base64Encode but split input as a new line first Base64EncodeByLines(\u0026quot;samp\\ndummy\u0026quot;)    "
},
{
	"uri": "/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Jaeles is a powerful, flexible and easily extensible framework written in Go for building your own Web Application Scanner. Signatures \u0026amp; Plugins Powerful, flexible and easily extensible signatures.\nUI Access "
},
{
	"uri": "/installation/burp-integration/",
	"title": "Burp Integration",
	"tags": [],
	"description": "",
	"content": " Plugin can be found here and Video Guide here\nHow to get JWT First time you run Jaeles, it\u0026rsquo;ll setup some config and credentials at ~/.jaeles/config.yaml\nPOST /auth/login HTTP/1.1 Content-Type: application/json User-Agent: Jaeles Scanner Host: 127.0.0.1:5000 Content-Length: 54 Connection: close { \u0026quot;username\u0026quot;: \u0026quot;jaeles\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;your_password_here\u0026quot; }  Use that credentials to get your JWT.\nHow to install Burp plugin Download the plugin on from this URL.\nRun Jaeles as server mode by using this command jaeles server -v. First time you run, it\u0026rsquo;s gonna create default credentials on ~/.jaeles/burp.json. (Delete ~/.jaeles/ folder and run it again if you have any issue)\nMake sure you have Jython intalled on Burp then load it. Burp -\u0026gt; Extender -\u0026gt; Add jaeles-burp.py as python extensions.\nWhen Plugin is loaded it gonna auto do login and store persistance JWT in ~/.jaeles/burp.json.\nGet input from Burp\n"
},
{
	"uri": "/architecture/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": " Overview flow Take list of Urls or raw request and combine with signature to generate request. Sending those requests and run detections script to determine request is vulnerable or not\n"
},
{
	"uri": "/signatures/detection/",
	"title": "Detection",
	"tags": [],
	"description": "",
	"content": " This part will be executed right after Jaeles got response from the request and do a logic for determine the request is vulnerable or not.\nDetections was written in Javascript so you can write whatever you want with some predefind function below as long as you return boolean value to determine it\u0026rsquo;s found something or not.\nExamples Detection # Reponse Status code equal 200 and the reponse body contain a string 'google.com' or 'example.com' StatusCode() == 200 \u0026amp;\u0026amp; (StringSearch(\u0026quot;response\u0026quot;, \u0026quot;google.com\u0026quot;) || StringSearch(\u0026quot;response\u0026quot;, \u0026quot;example.com\u0026quot;)) # Content Length of the response have to greater than original request ContentLength() - OriginContentLength() \u0026gt; 5000 # Response time of the request greater or smaller than original response time Math.abs(ResponeTime() \u0026gt; OriginResponeTime()) \u0026gt; 3  Normal Detection    API Detection Description Example     StringSearch Search string in component StringSearch(\u0026quot;response\u0026quot;, \u0026quot;something\u0026quot;)   StringCount Return number of string in component StringCount(\u0026quot;response\u0026quot;, \u0026quot;something\u0026quot;)   RegexSearch Search regex in component RegexSearch(\u0026quot;response\u0026quot;, \u0026quot;.*something$\u0026quot;)   RegexCount Return number of string match the regex in component RegexCount(\u0026quot;response\u0026quot;, \u0026quot;.*something$\u0026quot;)   StatusCode Status code of the response StatusCode() == 200, StatusCode() \u0026gt; 400   ResponeTime Response time of the response (second) ResponeTime() \u0026gt; 3   ContentLength Content Length of response ContentLength() \u0026gt; 5000, StatusCode() \u0026gt; 400   OriginStatusCode Status code of the Original response OriginStatusCode() != StatusCode()   OriginResponeTime Response time of the Original response (second) ResponeTime() \u0026gt; OriginResponeTime()   OriginContentLength Content Length of Original response ContentLength() - OriginContentLength() \u0026gt; 5000    Selector for search    API Detection Description Example     request raw request StringSearch(\u0026quot;request\u0026quot;, \u0026quot;something\u0026quot;)   response raw response of the request StringSearch(\u0026quot;oresponse\u0026quot;, \u0026quot;something\u0026quot;)   orequest raw original request StringSearch(\u0026quot;orequest\u0026quot;, \u0026quot;something\u0026quot;)   oresponse raw original request response of the request StringSearch(\u0026quot;response\u0026quot;, \u0026quot;something\u0026quot;)   middleware output of middleware StringSearch(\u0026quot;middleware\u0026quot;, \u0026quot;Success!\u0026quot;)    Special Detection    API Detection Description Example     Collab Grepping collaborator reponse in Reuqest response or Do Real Polling with BurpCollab secret. Collab(\u0026quot;{{.oob}}\u0026quot;)    "
},
{
	"uri": "/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Jaeles installation Make sure Go installed and simply execute the following command\ngo get -u github.com/jaeles-project/jaeles  Inittialize Signature and Web UI This gonna pull latest signature and UI build from default repo.\njaeles config -a init  Load new signature to Database Just save new signature to anywhere then load it by the command below.\njaeles config -a reload -F /tmp/custom-signatures/  with /tmp/custom-signatures/ is your custom signature folder.\nOr you can just use new signature directly by using this command\njaeles scan -s new_sign.yaml -u example.com  "
},
{
	"uri": "/signatures/generator/",
	"title": "Generator",
	"tags": [],
	"description": "",
	"content": " This part will be executed before parsing request input with the signature for generate variation request base on the original request. Generator inly avaliable in type: fuzz signature.\nGenerator    API Generator Description Example     Method Gen request based on method Method(\u0026quot;PUT\u0026quot;) , Method()   Query Gen request based on Query String Query(\u0026quot;{{.original}}{{.payload}}\u0026quot;), Query(\u0026quot;{{.original}}{{.payload}}\u0026quot;, \u0026quot;new\u0026quot;)   Path Gen request based on Path of URL Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;ext\u0026quot;)   Body Gen request based on Request Body Body(\u0026quot;{{.original}}{{.payload}}\u0026quot;)   Header Gen request based on Request Header Header(\u0026quot;{{.original}}{{.payload}}\u0026quot;, \u0026quot;X-Sample\u0026quot;)   Cookie Gen request based on Cookie Header Cookie(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;sample\u0026quot;), Cookie(\u0026quot;{{.original}}{{.payload}}\u0026quot;)    Using Generator id: sqli-01-01 info: name: SQL Injection Error based risk: Critical type: fuzz payloads: - '''\u0026quot;' - '`}' requests: - generators: - Query(\u0026quot;{{.payload}}\u0026quot;) detections: - \u0026gt;- StringSearch(\u0026quot;response\u0026quot;, \u0026quot;mysql_fetch_array\u0026quot;)  If you want to generate single request with many generator do like this - Query(\u0026quot;{{.payload}}\u0026quot;); Method(\u0026quot;PUT\u0026quot;).\n Method Method() will generate \u0026quot;GET\u0026quot;, \u0026quot;POST\u0026quot;, \u0026quot;PUT\u0026quot;, \u0026quot;HEAD\u0026quot;, \u0026quot;PATCH\u0026quot; based on request input. If parameter specified Method(\u0026quot;PUT\u0026quot;) only one request with PUT method generated.\nQuery, Body and Header Query(\u0026quot;{{.original}}{{.payload}}\u0026quot;) will generate number of based on number of query string in URL of the request input.\nFor example with signature sqli-01-01 and our URL is http://example.com/?q=123. We gonna get two new requests with URL http://example.com/?q=123'\u0026quot; and http://example.com/?q=123%60}.\nIf we use Query(\u0026quot;{{.original}}{{.payload}}\u0026quot;,\u0026quot;new\u0026quot;) generator then we gonna get http://example.com/?q=123\u0026amp;new='\u0026quot;.\nHeader() and Body() have same usage of Query() generator.\nFor example. Body(\u0026quot;{{.original}}{{.payload}}\u0026quot;) generate number of based on number of request body parameter of the request input.\nHeader(\u0026quot;{{.original}} \\ {{.payload}}\u0026quot;, \u0026quot;X-Command\u0026quot;) will generate a new request with X-Command header with our payload.\nPath First of all, Jaeles split path of URL like this\nURL: http://example.com/rest/products/6/reviews.php?q=123 Path: =\u0026gt; /rest/products/6/reviews 0 1 2 3 -1  and have some special parameter ext, last, 0/1/2 and *.\nFor example our URL is http://example.com/a/b/reviews.php?q=123.\n   Path Generator Desc E.g our payload is .json.     Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;last\u0026quot;) Last position of the Path http://example.com/a/b/.json?q=123   Path(\u0026quot;{{.original}}{{.payload}}\u0026quot;, \u0026quot;last\u0026quot;) Last position of the Path http://example.com/a/b/reviews.php.json?q=123   Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;*\u0026quot;) Loop for all positions http://example.com/a.json/b/reviews?q=123 http://example.com/a/b.json/reviews?q=123 http://example.com/a/b/reviews.json?q=123    If you don\u0026rsquo;t specified position parameter like this Path(\u0026quot;{{.payload}}\u0026quot;), by default it\u0026rsquo;s equal to Path(\u0026quot;{{.payload}}\u0026quot;, \u0026quot;last\u0026quot;).\n"
},
{
	"uri": "/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": " Modes  Scan Mode Fuzz Modde\nJaeles - The Swiss Army knife for automated Web Application Testing - beta v0.1.1 RC0 by @j3ssiejjj Usage: jaeles [command] Available Commands: config Configuration CLI help Help about any command scan Do the Scan server Run server Flags: -c, --concurrency int concurrency (default 20) --config string config file (default is $HOME/.jaeles/config.yaml) --debug Debug --delay int Milliseconds delay for polling new job (default 100) -h, --help help for jaeles --no-background Do not run background task --no-output Do not store raw output -o, --output string output folder name (default \u0026quot;out\u0026quot;) --proxy string proxy --refresh int Refresh (default 10) --retry int retry (default 2) --rootDir string root Project (default \u0026quot;~/.jaeles/\u0026quot;) --save-raw save raw request --scanID string Scan ID --signDir string signFolder (default \u0026quot;~/.jaeles/signatures-base/\u0026quot;) --timeout int HTTP timeout (default 20) -v, --verbose Verbose Use \u0026quot;jaeles [command] --help\u0026quot; for more information about a command.   Scan Scan list of URLs based on signatures Usage: jaeles scan [flags] Flags: -h, --help help for scan -s, --sign string Provide custom header seperate by ',' --ssrf string Fill your BurpCollab or any Out of Band host -u, --url string URL of target -U, --urls string URLs file of target  Examples Command # scan all signature for single url jaeles scan -u http://example.com # scan phpdebug.yaml signature for list of urls jaeles scan -s signatures/common/phpdebug.yaml -U /tmp/list_of_urls.txt # scan all signatures with \u0026quot;aem\u0026quot; prefix for list of urls jaeles scan --retry 3 --verbose -s \u0026quot;signatures/cves/aem-*\u0026quot; -U /tmp/list_of_urls.txt  Fuzz Start API Server Usage: jaeles server [flags] Flags: -h, --help help for server --host string IP address to bind the server (default \u0026quot;127.0.0.1\u0026quot;) -l, --level int16 Provide custom header seperate by ';' (default 1) --port string Port (default \u0026quot;5000\u0026quot;) -s, --sign string Provide custom header seperate by ';'  Examples Command # scan API server on http://127.0.0.1:5000 jaeles server # scan API server on http://127.0.0.1:5000 with default signature sqli jaeles --verbose server -s sqli  Burp Integration Plugin can be found here and Video Guide here\n"
},
{
	"uri": "/signatures/middleware/",
	"title": "Middleware",
	"tags": [],
	"description": "",
	"content": "This part will be executed right before request send to the target for doing some extra task before sending a request to target.\n   API Detection Description Example     InvokeCmd Execute Command line and get result of it InvokeCmd(\u0026quot;phuip-fpizdam {{.URL}}\u0026quot;)   Host2IP Turn Host: domain.com header to Host: IP address Host2IP()    "
},
{
	"uri": "/showcases/",
	"title": "ShowCase",
	"tags": [],
	"description": "",
	"content": " Some Demo Video List Signature with list of Urls  Detect Jira SSRF CVE-2019-8451\nSingle Signature with list of Urls \nDetect PHPDebug bar.\nFuzzing mode with Burp  Simple SQL Injection.\n"
},
{
	"uri": "/donation/",
	"title": "Donation",
	"tags": [],
	"description": "",
	"content": " If you love my tools and would like to support my work, please check out some donation methods below.\nVia Opencollective \nVia Patreon \nFor people who want to support from local country If you want your name appear on this page just put [Jaeles] inside your transaction message.\n\n\n"
},
{
	"uri": "/signatures/examples/",
	"title": "Example Signatures",
	"tags": [],
	"description": "",
	"content": " Take a look at this repo repo for more examples.\n Single signature List signature Fuzz signature  Single signature Sending request to URLs with append /_debugbar/open?max=20\u0026amp;offset=0 and look for {\u0026quot;id\u0026quot;:\u0026quot; string in the reponse if it success.\nList signature Sending request to URLs with append /{{.jira}}plugins/servlet/gadgets/makeRequest?url=https://127.0.0.1:443@{{.ssrf}} with {{.jira}} and {{.ssrf}} get from variables.\nSimulate Directory Bruteforce with content from /tmp/sensitive_paths.txt. Confirm the path exist if Secret is in the reponse or Not Found word isn\u0026rsquo;t in the repsonse and different lengoth of the request and original \u0026gt; 1000.\nFuzz signature Repeat request recive from API and change replace the query value by the payload and look for error in the response.\nRepeat exactly request recive from API and change Content-Type of it and look for change in status code and response length to confirm that Content-Type can be used in application.\n"
},
{
	"uri": "/installation/persistent-burpcollaborator/",
	"title": "Persistent Burpcollaborator",
	"tags": [],
	"description": "",
	"content": " Get Collaborator Secret token Route traffic through proxy\nBurp -\u0026gt; Project Options -\u0026gt; Connections -\u0026gt; Upstream Proxy Server -\u0026gt; then run command below\nmitmdump -q -p 8667 -s burpcollaborator-oob.py  Get burpcollaborator secret\nBurp -\u0026gt; Project Options -\u0026gt; Connections -\u0026gt; Mics -\u0026gt; -\u0026gt; Burp Collaborator Server. Check on Poll over unencrypted HTTP.\nNow open Collaborator Client and click Poll now.\nCopy as many collab as need to be and store it in a file.\nDefault log will be store in ./collaborator.json\n "
},
{
	"uri": "/signatures/",
	"title": "Understand Signatures",
	"tags": [],
	"description": "",
	"content": " Each signature basically split in three parts and written in YAML format.    Page Description     Info Information about the signature   Variables \u0026amp; Payloads Various way to generate input for a request   Request builder Overview Define various comoponent of the request that will send   Examples Signatures Real Signature from base repository    Info Some information about the signature to index in the DB\n# ID to index a signature id: common-01-01 # Type of signature default is \u0026quot;single\u0026quot; type: list # Some info about signature info: name: PHP Debug bar # those feilds below are optional # default is \u0026quot;Info\u0026quot; risk: High tech: general os: general  Request Builder Overview  Detection: Do some logical on based on detections script to determine request is vulnerable or not.\n Request comoponent: Define various comoponent of the request that will be send to the target and detect if it vulnerable or not by analyze response.\n Generator: Only available in fuzz signature. Provide some functions to generate request based on the template request with payloads. Middleware: Doing some extra task before sending a request to target.   Example of request component\nYou can even use burp style as a request component\n id: sensitive-01-01 type: list # Original request to compare origin: method: GET redirect: true path: \u0026gt;- {{.BaseURL}} variables: # we can put list of it in a file and load it - sensitive: /tmp/sensitive_path.txt requests: - method: GET redirect: true path: \u0026gt;- {{.BaseURL}}/{{.stats}}s detections: - \u0026gt;- StatusCode() == 200 \u0026amp;\u0026amp; StringSearch(\u0026quot;response\u0026quot;, \u0026quot;Secret\u0026quot;) - \u0026gt;- StatusCode() == 200 \u0026amp;\u0026amp; !StringSearch(\u0026quot;response\u0026quot;, \u0026quot;Not Found\u0026quot;) \u0026amp;\u0026amp; Math.abs(ContentLength() - OriginContentLength() \u0026gt; 1000)  With Origin request to use Origin Detection API [Optional] Reference This is just a reference info used to describe where the signature come out.\nreference: # author of the CVE or peopel inspired you create this signature - credit: @example - link: https://jira.atlassian.com/browse/JRASERVER-70018 # author of this signature - author: @example - affected_version: 1.2 - 2  "
},
{
	"uri": "/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Jaeles - The Swiss Army knife for automated Web Application Testing Overview    Page Description     Introduction Overview about Jaeles   Architecture Overview about the architecture   Installation Guide to Installation   Usage Guide to basic usage   Demo Some showcases   Understand Signature Understand and Write your own Signature   Donation  Supporting me    "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]