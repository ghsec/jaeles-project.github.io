<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Jaeles Scanner</title>
    <link>/</link>
    <description>Recent content in Home on Jaeles Scanner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jul 2019 22:50:41 +0700</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Detection</title>
      <link>/signatures/detection/</link>
      <pubDate>Wed, 31 Jul 2019 14:12:42 +0700</pubDate>
      
      <guid>/signatures/detection/</guid>
      <description>This part will be executed right after Jaeles got response from the request and do a logic for determine the request is vulnerable or not.
Detections was written in Javascript so you can write whatever you want with some predefind function below as long as you return boolean value to determine it&amp;rsquo;s found something or not.
Examples Detection # Reponse Status code equal 200 and the reponse body contain a string &#39;google.</description>
    </item>
    
    <item>
      <title>Burp Integration</title>
      <link>/installation/burp-integration/</link>
      <pubDate>Wed, 31 Jul 2019 13:01:12 +0700</pubDate>
      
      <guid>/installation/burp-integration/</guid>
      <description>Plugin can be found here and Video Guide here
How to get JWT First time you run Jaeles, it&amp;rsquo;ll setup some config and credentials at ~/.jaeles/config.yaml
POST /auth/login HTTP/1.1 Content-Type: application/json User-Agent: Jaeles Scanner Host: 127.0.0.1:5000 Content-Length: 54 Connection: close { &amp;quot;username&amp;quot;: &amp;quot;jaeles&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;your_password_here&amp;quot; }  Use that credentials to get your JWT.
How to install Burp plugin Download the plugin on from this URL.
Run Jaeles as server mode by using this command jaeles server -v.</description>
    </item>
    
    <item>
      <title>Generator</title>
      <link>/signatures/generator/</link>
      <pubDate>Wed, 31 Jul 2019 14:12:42 +0700</pubDate>
      
      <guid>/signatures/generator/</guid>
      <description>This part will be executed before parsing request input with the signature for generate variation request base on the original request. Generator inly avaliable in type: fuzz signature.
Generator    API Generator Description Example     Method Gen request based on method Method(&amp;quot;PUT&amp;quot;) , Method()   Query Gen request based on Query String Query(&amp;quot;{{.original}}{{.payload}}&amp;quot;), Query(&amp;quot;{{.original}}{{.payload}}&amp;quot;, &amp;quot;new&amp;quot;)   Path Gen request based on Path of URL Path(&amp;quot;{{.</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>/signatures/middleware/</link>
      <pubDate>Wed, 31 Jul 2019 14:12:42 +0700</pubDate>
      
      <guid>/signatures/middleware/</guid>
      <description>This part will be executed right before request send to the target for doing some extra task before sending a request to target.
   API Detection Description Example     InvokeCmd Execute Command line and get result of it InvokeCmd(&amp;quot;phuip-fpizdam {{.URL}}&amp;quot;)   Host2IP Turn Host: domain.com header to Host: IP address Host2IP()    </description>
    </item>
    
    <item>
      <title>Example Signatures</title>
      <link>/signatures/examples/</link>
      <pubDate>Wed, 31 Jul 2019 14:12:42 +0700</pubDate>
      
      <guid>/signatures/examples/</guid>
      <description>Take a look at this repo for more examples.
 Single signature List signature Fuzz signature  Single signature Sending request to URLs with append /_debugbar/open?max=20&amp;amp;offset=0 and look for {&amp;quot;id&amp;quot;:&amp;quot; string in the reponse if it success.
List signature Sending request to URLs with append /{{.jira}}plugins/servlet/gadgets/makeRequest?url=https://127.0.0.1:443@{{.ssrf}} with {{.jira}} and {{.ssrf}} get from variables.
Simulate Directory Bruteforce with content from /tmp/sensitive_paths.txt. Confirm the path exist if Secret is in the reponse or Not Found word isn&amp;rsquo;t in the repsonse and different lengoth of the request and original &amp;gt; 1000.</description>
    </item>
    
    <item>
      <title>Persistent Burpcollaborator</title>
      <link>/installation/persistent-burpcollaborator/</link>
      <pubDate>Wed, 31 Jul 2019 13:02:57 +0700</pubDate>
      
      <guid>/installation/persistent-burpcollaborator/</guid>
      <description>Get Collaborator Secret token Route traffic through proxy
Burp -&amp;gt; Project Options -&amp;gt; Connections -&amp;gt; Upstream Proxy Server -&amp;gt; then run command below
mitmdump -q -p 8667 -s burpcollaborator-oob.py  Get burpcollaborator secret
Burp -&amp;gt; Project Options -&amp;gt; Connections -&amp;gt; Mics -&amp;gt; -&amp;gt; Burp Collaborator Server. Check on Poll over unencrypted HTTP.
Now open Collaborator Client and click Poll now.
Copy as many collab as need to be and store it in a file.</description>
    </item>
    
  </channel>
</rss>